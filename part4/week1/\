#include <iostream>
#include <fstream>
#include <vector>
#include <utility>

using namespace std;

const string FILE_NAME1 = "g1.txt";
const string FILE_NAME2 = "g2.txt";
const string FILE_NAME3 = "g3.txt";

// Edge(to, cost)
typedef pair<int, int> Edge;
typedef vector<vector<Edge> > Graph;

Graph make_graph() {
    ifstream file;
    file.open(FILE_NAME1, ios::in);
    string buf;

    int node_num;
    int edge_num;
    if (!file.eof()) {
        getline(file, buf);
        node_num = stoi(buf.substr(0, buf.find(" ")));
        buf = buf.substr(0, buf.find(" "));
        edge_num = stoi(buf);
    }
    Graph G(node_num);
    while (!file.eof()) {
        getline(file, buf);
        if (buf.size() != 0) {
            int from = stoi(buf.substr(0, buf.find(" "))) - 1;
            buf = buf.substr(0, buf.find(" "));
            int to = stoi(buf.substr(0, buf.find(" "))) - 1;
            buf = buf.substr(0, buf.find(" "));
            int cost = stoi(buf);
            G[from].push_back(make_pair(to, cost));
        }
    }
    file.close();

    return G;

}

int main() {
    Graph G;
    G = make_graph();
    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < G[i].size(); j++) {
            cout << "from : " << i << " to : " << G[i][j].first << " cost : " << G[i][j].second << endl;
        }
    }
}
